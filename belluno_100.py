# -*- coding: utf-8 -*-
"""Belluno_100.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KBRPL0TrTgG8CdsjWjcDFqVyWzsj5HjB

#**BELLUNO 100mx100m**
"""

#sessionInfo()

#library()

install.packages(c('spatstat', 'SpatEntropy', 'tibble', 'dplyr','janitor','sp','PROJ', 'plyr'), 
                repos = "http://cran.rstudio.com/")

library(spatstat)
library(SpatEntropy)
library(tibble)
library(plyr) 
library(dplyr)
library(janitor)
library(sp)
library(PROJ)

# install gdal
system('sudo apt-get update')
system('sudo apt-get install libgdal-dev libproj-dev')

# install required R packages
install.packages(c("rgdal","rgeos","maptools"), repos='http://cran.rstudio.com/')

library(rgdal)
library(rgeos)
library(maptools)

"""# **DATA**

---
"""

source('/content/Functions.R')

dataBL = read.csv("/content/dataBL_100C.csv")

dataBL$COMUNE = as.character(dataBL$COMUNE)
dataBL$COMUNE = ifelse(dataBL$COMUNE == 'Arsi\xe8','Arsiè', dataBL$COMUNE)
dataBL$COMUNE = ifelse(dataBL$COMUNE == 'San Nicol\xf2 di Comelico', 'San Nicolò di Comelico', dataBL$COMUNE)
dataBL$COMUNE = ifelse(dataBL$COMUNE == 'Zopp\xe8 di Cadore', 'Zoppè di Cadore', dataBL$COMUNE)
dim(dataBL)
head(dataBL)

comuni = unique(dataBL$COMUNE[order(dataBL$COMUNE)])
comuni = comuni[-1]
print(comuni)

"""### TABLE ###"""

dim(dataBL)
print(unique(dataBL$COMUNE))

dataBL$COMUNE = as.character(dataBL$COMUNE)
dataBL$COMUNE = ifelse(dataBL$COMUNE == 'ArsiÃ¨','Arsiè', dataBL$COMUNE)
dataBL$COMUNE = ifelse(dataBL$COMUNE == 'San NicolÃ² di Comelico', 'San Nicolò di Comelico', dataBL$COMUNE)
dataBL$COMUNE = ifelse(dataBL$COMUNE == 'ZoppÃ¨ di Cadore', 'Zoppè di Cadore', dataBL$COMUNE)

dataBL$Ritagliato = ifelse(is.na(dataBL$COMUNE), NA, dataBL$Ritagliato)
dataBL$Ritaglia_1 = ifelse(is.na(dataBL$COMUNE), NA, dataBL$Ritaglia_1)

dataBL$cover = ifelse(dataBL$DNZone == 111, 1, 0)
dataBL$cover = ifelse(dataBL$DNZone == 112, 1, dataBL$cover)
dataBL$cover = ifelse(dataBL$DNZone == 121, 1, dataBL$cover)
dataBL$cover = ifelse(dataBL$DNZone == 122, 1, dataBL$cover)
dataBL$cover = ifelse(dataBL$DNZone == 123, 1, dataBL$cover)
dataBL$cover = ifelse(dataBL$DNZone == 124, 1, dataBL$cover)
dataBL$cover = ifelse(dataBL$DNZone == 131, 1, dataBL$cover)
dataBL$cover = ifelse(dataBL$DNZone == 132, 1, dataBL$cover)
dataBL$cover = ifelse(dataBL$DNZone == 133, 1, dataBL$cover)
dataBL$cover = ifelse(dataBL$DNZone == 141, 1, dataBL$cover)
dataBL$cover = ifelse(dataBL$DNZone == 142, 1, dataBL$cover)
dataBL$cover = ifelse(is.na(dataBL$COMUNE), NA, dataBL$cover)

dim(dataBL)

"""### **Precision OSM**"""

buildings_veneto = read.csv("/content/buildings_veneto.csv")
buildings_belluno = buildings_veneto[buildings_veneto$COD_PROV == 25,]

area_veneto = read.csv("/content/area_comuni.csv")
buildings_belluno = as.data.frame(left_join(buildings_belluno, area_veneto, by = 'COMUNE'))
buildings_belluno$perc_built = buildings_belluno$Ritagliato/buildings_belluno$SHAPE_AREA*100

buildings_belluno$COMUNE = ifelse(buildings_belluno$COMUNE == 'ArsiÃ¨', 'Arsiè', buildings_belluno$COMUNE)
buildings_belluno$COMUNE = ifelse(buildings_belluno$COMUNE == 'San NicolÃ² di Comelico', 'San Nicolò di Comelico', buildings_belluno$COMUNE)
buildings_belluno$COMUNE = ifelse(buildings_belluno$COMUNE == 'ZoppÃ¨ di Cadore', 'Zoppè di Cadore', buildings_belluno$COMUNE)

tot_built_area = sum(buildings_belluno$Ritagliato, na.rm = TRUE) #21619857
tot_area = sum(buildings_belluno$SHAPE_AREA)
perc_BL = tot_built_area*100/tot_area

print(tot_built_area)
print(tot_area)
print(perc_BL)

precision_table = as.data.frame(seq(0, 99, by = 1))
colnames(precision_table) = 'Percentage'

grid = as.data.frame(subset(dataBL,!duplicated(dataBL$id)))
dim(grid)

for (i in 1:100) {
  table = grid[grid$Ritaglia_1 > precision_table$Percentage[i],]
  precision_table$area[i] = 100*100*nrow(table)
}

precision_table$cover_perc = round(precision_table$area/(nrow(grid)*100), digits = 3)
precision_table$bias = precision_table$cover_perc/perc_BL

precision_table

plot(precision_table$Percentage, precision_table$bias, 
     xlim = c(0,30), ylim = c(0,5), pch = 19,
     main = 'Representation Bias',
     xlab = 'Selection Percentage', ylab = 'Quantity represented area (%)')
abline(h = 1, lwd = 1.5, col = 'darkgreen')
abline(h = 2, lwd = 1.5, lty = 2, col = 'darkred')

# 14% ---> 1% upper bias

"""## **Consumption Analysis - Sprawl**"""

dataBL$build = ifelse(dataBL$Ritaglia_1 > 14, 1, 0)
dataBL$build = ifelse(dataBL$cover == 1, 1, dataBL$build)
dataBL$build = ifelse(is.na(dataBL$COMUNE), NA, dataBL$build)

c_built = as.data.frame.matrix(table(dataBL$COMUNE, dataBL$build))
c_built$area = as.numeric(c_built$`0` + c_built$`1`)
c_built$prop_built = as.numeric(c_built$`1`/c_built$area)
c_built$perc_built = as.numeric(c_built$prop_built*100)
c_built = rownames_to_column(c_built, var = "COMUNE")
c_built

shp_comuni = readOGR(dsn = '/content', layer = 'data18_BL_100', use_iconv = TRUE, dropNULLGeometries = FALSE,
encoding="UTF-8")
shp_comuni@data[['COMUNE']] = as.character(shp_comuni@data[['COMUNE']])
dim(shp_comuni)

shp_comuni@data = left_join(shp_comuni@data, dataBL[,c(1,2)], by = 'id')
dim(shp_comuni)

shp_comuni@data[['COMUNE']] = ifelse(shp_comuni@data[['COMUNE']] == 'ArsiÃ¨','Arsiè', shp_comuni@data[['COMUNE']])
shp_comuni@data[['COMUNE']] = ifelse(shp_comuni@data[['COMUNE']] == 'San NicolÃ² di Comelico', 'San Nicolò di Comelico', shp_comuni@data[['COMUNE']])
shp_comuni@data[['COMUNE']] = ifelse(shp_comuni@data[['COMUNE']] == 'ZoppÃ¨ di Cadore', 'Zoppè di Cadore', shp_comuni@data[['COMUNE']])
shp_comuni@data[['COMUNE']] = ifelse(shp_comuni@data[['COMUNE']] == "Cortina d\'Ampezzo", paste("Cortina d'Ampezzo", shp_comuni@data[['COMUNE']])
shp_comuni@data[['COMUNE']] = ifelse(shp_comuni@data[['COMUNE']] == "Chies d\'Alpago", "Chies d'Alpago", shp_comuni@data[['COMUNE']])
shp_comuni@data[['COMUNE']] = ifelse(shp_comuni@data[['COMUNE']] == "Canale d\'Agordo", "Canale d'Agordo", shp_comuni@data[['COMUNE']])
dim(shp_comuni)

Sys.setlocale()
Sys.setlocale("LC_ALL","it")
Sys.setlocale()

unique(shp_comuni@data[['COMUNE']])[1:61]

shp_comuni@data[['COMUNE']] <- lapply(shp_comuni@data[['COMUNE']], gsub, pattern='\'', replacement='')

shp_comuni@data$id = as.numeric(shp_comuni@data$id)
shp_comuni@data = left_join(shp_comuni@data, dataBL_R, by = c('id'='id', 'COMUNE'='COMUNE')
dim(shp_comuni@data)
head(shp_comuni@data)

dataBL_R = read.csv("/content/dataBL_100R.csv")

head(dataBL_R)
dim(dataBL_R)
unique(dataBL_R$COMUNE)

for(n in 1:1){
  grid_comune = subset(shp_comuni, COMUNE == comuni[n])

  jpeg(filename = paste('/content/plots/Belluno_', comuni[n],'_100m.jpg', sep = ''), 
       width = 700, height = 700, quality = 100, res = 120)
  
  plot(grid_comune, col = grid_comune@data$frag, main = comuni[n],
       sub = 'Pixel lattice with 100x100m resolution of soil fragmentation \n due to roofed built-up areas (Black) and liner infrastructures (Red)')
  
  dev.off()

}

n=1
grid_comune = subset(shp_comuni, COMUNE == comuni[n])

plot(grid_comune, col = grid_comune@data$frag, main = comuni[n],
       sub = 'Pixel lattice with 100x100m resolution of soil fragmentation \n due to roofed built-up areas (Black) and liner infrastructures (Red)')

Encoding(shp_comuni@data[['COMUNE']]) <- "UTF-8"

"""# **LOOP**

---
"""

rows = 904
cols = 802 # 725008

for(i in 6:7){

  print(c(i, comuni[i]))

  # Data Matrix
  grid = dataBL[,c(1,10,14)]
  grid$build[grid$COMUNE != comuni[i]] = NA
  grid = grid[order(grid[,'id'], grid[,'build']),]
  grid = grid[!duplicated(grid$id),]

  m = matrix(grid$build, nrow = rows, ncol = cols, byrow = FALSE)
  m = remove_empty(m, which = c("rows", "cols"), quiet = TRUE)

  # Shannon Z
  shZ = shannonZ_IR(m)
  write.csv(do.call("rbind", list(unlist(shZ))), file = paste('/content/shannZ/shZBL_', comuni[i],'.csv', sep = ''))

  # Observation Window
  grid_comune = subset(shp_comuni, COMUNE == comuni[i])
  grid_comune@data = as.data.frame(grid_comune@data[,8])
  names(grid_comune@data) = 'build'
  win = as.owin(grid_comune)

 # Centroids
  cc = gCentroid(grid_comune, byid = TRUE)
  coord = as.data.frame(cc@coords)
  ccP = ppp(coord$x, coord$y, win)

  # Distance Matrix
  dmat = round(pairdist(ccP), digits = 0)
  dmat[lower.tri(dmat, diag = TRUE)] = NA 

  # Altieri Entropy
  maxdist = round(max(gDistance(disaggregate(grid_comune), byid = TRUE)), digits = 0)
  distbreaks = c(0, 250, 500, 1000, 1500, 2000, 3000, maxdist)
  adjlist = adj_list(dmat, distbreaks)
  
  altieri = spat_entropy_IR(m, adjlist, shZ)
  write.csv(do.call("rbind", list(unlist(altieri))), file = paste('/content/altieri/AltieriBL_', comuni[i],'.csv', sep = ''))

  local.sum = altieri$res.local + altieri$mut.local

  # Plots
  jpeg(filename = paste('/content/plots/Belluno_', comuni[i],'_100m.jpg', sep = ''), 
       width = 700, height = 700, quality = 100, res = 120)
  
  plot(grid_comune, col = grid_comune@data$build, main = comuni[i],
       sub = 'Pixel lattice with 100x100m resolution of roofed built-up areas (Black)')
  
  dev.off()
  
  jpeg(filename = paste('/content/plots/BellunoEntropy_', comuni[i],'_100m.jpg', sep = ''), 
       width = 1000, height = 700, quality = 100, res = 120)

  barplot(height = rbind(altieri$mut.local/local.sum, altieri$res.local/local.sum),
          beside = FALSE,
          col = c('darkgrey', 'white'),
          names.arg = c('w1','w2',' w3', 'w4', 'w5', 'w6', 'w7'),
          main = comuni[i],
          sub = 'Partial Information (Gray) and Partial Residual Entropy (White) 
        in proportional terms for each distance range')
  
  dev.off()

}



"""### SAVE OUTPUT FOLDERS ###"""

files2zip = dir('/content/altieri', full.names = TRUE)
zip(zipfile = '/content/ZipAltieri_BL', files = files2zip)

files2zip = dir('/content/plots', full.names = TRUE)
zip(zipfile = '/content/ZipPlots_BL', files = files2zip)

files2zip = dir('/content/shannZ', full.names = TRUE)
zip(zipfile = '/content/ZipShannZ_BL', files = files2zip)

"""# **TEST**

---
"""

n = 18

rows = 904
cols = 802 # 725008

# Data Matrix
grid = dataBL
grid$build[grid$COMUNE != comuni[n]] = NA
grid = grid[order(grid[,'id'], grid[,'build']),]
grid = grid[!duplicated(grid$id),]

dim(grid)

grid = matrix(grid$build, nrow = rows, ncol = cols, byrow = FALSE)
grid = remove_empty(grid, which = c("rows", "cols"), quiet = TRUE)

dim(grid)

# write.csv(m, file = '/content/matrix.csv')

# Shannon Z
shZ = shannonZ_IR(grid)
shZ
write.csv(do.call("rbind", list(unlist(shZ))), file = paste('/content/shannZ/shZBL_', comuni[n],'.csv', sep = ''))

"""### Altieri Entropy"""

# Observation Window
grid_comune = subset(shp_comuni, COMUNE == comuni[n])
grid_comune@data = as.data.frame(grid_comune@data[,8])

names(grid_comune@data) = 'build'
head(grid_comune@data)

win = as.owin(grid_comune)

plot(grid_comune, col = grid_comune@data$build, main = comuni[n],
       sub = 'Pixel lattice with 100x100m resolution of roofed built-up areas (Black)')

jpeg(filename = paste('/content/plots/Belluno_', comuni[n],'_100m.jpg', sep = ''), 
       width = 700, height = 700, quality = 100, res = 120)
  
plot(grid_comune, col = grid_comune@data$build, main = comuni[n],
       sub = 'Pixel lattice with 100x100m resolution of roofed built-up areas (Black)')
  
dev.off()

# Centroids
cc = gCentroid(grid_comune, byid = TRUE)
coord = as.data.frame(cc@coords)
ccP = ppp(coord$x, coord$y, win)

ccP

# Distance Matrix
dmat = round(pairdist(ccP), digits = 0)
dmat[lower.tri(dmat, diag = TRUE)] = NA

# Altieri Entropy
maxdist = round(max(gDistance(disaggregate(grid_comune), byid = TRUE)), digits = 0)
distbreaks = c(0, 250, 500, 1000, 1500, 2000, 3000, 5000, maxdist)
adjlist = adj_list(dmat, distbreaks)
  
altieri = spat_entropy_IR(m, adjlist, shZ)

local.sum = altieri$res.local + altieri$mut.local

altieri
write.csv(do.call("rbind", list(unlist(altieri))), file = paste('/content/altieri/AltieriBL_', comuni[n],'.csv', sep = ''))

barplot(height = rbind(altieri$mut.local/local.sum, altieri$res.local/local.sum),
          beside = FALSE,
          col = c('darkgrey', 'white'),
          names.arg = c('w1','w2',' w3', 'w4', 'w5', 'w6', 'w7', 'w8'),
          main = comuni[n],
          sub = 'Partial Information (Gray) and Partial Residual Entropy (White) in proportional terms for each distance range')

jpeg(filename = paste('/content/plots/BellunoEntropy_', comuni[n],'_100m.jpg', sep = ''), 
       width = 1000, height = 700, quality = 100, res = 120)

barplot(height = rbind(altieri$mut.local/local.sum, altieri$res.local/local.sum),
          beside = FALSE,
          col = c('darkgrey', 'white'),
          names.arg = c('w1','w2',' w3', 'w4', 'w5', 'w6', 'w7'),
          main = comuni[i],
          sub = 'Partial Information (Gray) and Partial Residual Entropy (White) 
        in proportional terms for each distance range')

dev.off()

"""## CODE"""

gc()

dataBL_f = read.csv("/content/dataBL.csv")
dim(dataBL_f)
head(dataBL_f)

dataBL_f$frag = ifelse(dataBL_f$LENGTH>10,2,0)
dataBL_f$frag = ifelse(dataBL_f$Ritagliato>50, 1, dataBL_f$frag)
dataBL_f$COMUNE = as.character(dataBL_f$COMUNE)
#dataBL_f$id = as.integer(dataBL_f$id)
dim(dataBL_f)
head(dataBL_f)

dataBL_f = left_join(dataBL, dataBL_f[,c(1,5)], by = 'id')
dim(dataBL_f)
head(dataBL_f)

n = 1

rows = 904
cols = 802 # 725008

# Data Matrix
grid = dataBL_f
grid$frag[grid$COMUNE != comuni[n]] = NA
grid = grid[order(grid[,'id'], grid[,'frag']),]
grid = grid[!duplicated(grid$id),]

dim(grid)

grid = matrix(grid$frag, nrow = rows, ncol = cols, byrow = FALSE)
grid = remove_empty(grid, which = c("rows", "cols"), quiet = TRUE)

dim(grid)

# Shannon Z
shZ = shannonZ_IR(grid)
shZ
write.csv(do.call("rbind", list(unlist(shZ))), file = paste('/content/shannZ/shZBL.f_', comuni[n],'.csv', sep = ''))

